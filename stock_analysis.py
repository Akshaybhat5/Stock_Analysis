# -*- coding: utf-8 -*-
"""Stock_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJz4e8US3l0MZJyQnsxwgnfivCg5-9eU

**STOCK ANALYSIS**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff
from scipy import stats
from copy import copy

data = pd.read_csv('stock.csv')

data.head()

data.isnull().sum()

def normalize(df):
    x = df.copy()
    for i in df.columns[1:]:
        x[i] = x[i] / x[i][0]
    return x

def interactive_plot(df, title):
    fig = px.line(title = title)
    for i in df.columns[1:]:
        fig.add_scatter(x = df['Date'], y = df[i])
    return fig

# daily returns

def daily_returns(df):
    data_daily_returns = df.copy()
    for i in df.columns[1:]:
        for j in range(1, len(df)):
            data_daily_returns[i][j] = ((df[i][j] - df[i][j-1]) / df[i][j-1]) * 100
        data_daily_returns[i][0] = 0
    return data_daily_returns

stocks_daily_returns = daily_returns(data)

stocks_daily_returns

stocks_daily_returns.mean()

sns.set_theme(style='darkgrid')
stocks_daily_returns.plot(kind = 'scatter', x = 'sp500', y = 'AAPL')
plt.title('APPLE VS SP500', fontweight='bold')
plt.tight_layout()

b, a = np.polyfit(stocks_daily_returns['sp500'], stocks_daily_returns['AAPL'],1)

b

a

stocks_daily_returns.plot(kind = 'scatter', x = 'sp500', y = 'AAPL')
plt.plot(stocks_daily_returns['sp500'], b*stocks_daily_returns['sp500']+a, '-',color='r')
plt.title('SP500 VS APPLE', fontweight='bold')

# apple_beta = 1.11 which is aggressive

beta = {}
alpha = {}

for i in stocks_daily_returns.columns:
    if i != 'Date' and i != 'sp500':
        stocks_daily_returns.plot(kind = 'scatter', x = 'sp500', y = i)
        b, a = np.polyfit(stocks_daily_returns['sp500'], stocks_daily_returns[i],1)
        plt.plot(stocks_daily_returns['sp500'], b*stocks_daily_returns['sp500']+a, '-',color='r')
        beta[i] = b
        alpha[i] = a
    plt.show()

# plots

for i in stocks_daily_returns.columns:
    if i != 'Date' and i != 'sp500':
        fig = px.scatter(stocks_daily_returns, x = 'sp500', y = i, title = i)
        b,a = np.polyfit(stocks_daily_returns['sp500'], stocks_daily_returns[i],1)
        fig.add_scatter(x = stocks_daily_returns['sp500'], y = b * stocks_daily_returns['sp500'] + a)
        fig.show()

beta

print(f'''The beta values for all the stocks :
 {beta}''')

keys = list(beta.keys())

keys

ER = {}
rf = 0

rm = stocks_daily_returns['sp500'].mean() * 252

rm

for i in keys:
    ER[i] = rf + (beta[i] * (rm - rf))

ER

for i in keys:
    print(f'The ER values of {i} is {round(ER[i],2)}')

ER_weights = 1/8 * np.ones(8)

ER_weights

ER_portfolio = sum(list(ER.values()) * ER_weights)

ER_portfolio

# with 50% allocation in apple stock
ER_50_Apple = 0.50 * ER['AAPL']

# with 50% allocation in amazon stock
ER_50_Amazon = 0.50 * ER['AMZN']

ER_50_Amazon

ER_50_Apple

# for both apple and amazon
apple_amazon = ER_50_Amazon + ER_50_Apple

apple_amazon

interactive_plot(data, 'PRICING')

interactive_plot(normalize(data), 'NORMALIZED PRICE')

